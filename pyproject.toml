[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "surrealdb"
version = "1.0.6"
description = "SurrealDB python client"
readme = "README.md"
authors = [{ name = "SurrealDB" }]
license = "Apache-2.0"
keywords = ["SurrealDB", "Database"]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp>=3.8.0",
    "cerberus>=1.3.0",
    "requests>=2.25.0",
    "typing_extensions>=4.0.0; python_version<'3.12'",
    "websockets>=10.0",
]

[project.urls]
homepage = "https://github.com/surrealdb/surrealdb.py"
repository = "https://github.com/surrealdb/surrealdb.py"
documentation = "https://surrealdb.com/docs/sdk/python"

[dependency-groups]
dev = [
    { include-group = "test" },
    "maturin>=1.0.0",
    "mypy>=1.0.0",
    "pyright>=1.1.0",
    "ruff>=0.12.0",
    "types-requests>=2.25.0",   # Type stubs for requests
]
test = [
    "coverage>=7.0.0",
    "hypothesis>=6.135.16",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

# --------------------------------------------------
# maturin
# --------------------------------------------------

[tool.maturin]
python-source = "src"
module-name = "surrealdb._surrealdb_ext"
features = ["pyo3/extension-module"]

# --------------------------------------------------
# ruff
# --------------------------------------------------

[tool.ruff]
exclude = ["src/surrealdb/__init__.py"]

[tool.ruff.lint]
select = [
    "I",  # isort
    "UP", # pyupgrade
]

# --------------------------------------------------
# mypy
# --------------------------------------------------

[tool.mypy]
mypy_path = "src"
explicit_package_bases = true

# Import discovery
namespace_packages = true
follow_imports = "normal"

# Type checking strictness
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false
warn_unused_configs = true
warn_unused_ignores = true

# Error reporting
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

# Incremental mode
incremental = true
cache_dir = ".mypy_cache"

# Platform configuration
python_version = "3.13"

# Third-party library stubs
[[tool.mypy.overrides]]
module = "cerberus.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "aiohttp.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "websockets.*"
ignore_missing_imports = true

# Relax type checking for tests - they work with Value union types extensively
[[tool.mypy.overrides]]
module = "tests.*"
# Disable strict type checking for test bodies but keep what we can
disallow_untyped_calls = false
disallow_any_generics = false
# Allow flexible indexing since query() returns Value union type
warn_return_any = false
# Don't warn about type narrowing issues
strict_optional = false
# Disable specific error codes that are problematic with Value union type and pytest fixtures
disable_error_code = [
    "index", "call-overload", "arg-type", "assignment", "return-value", 
    "operator", "union-attr", "func-returns-value", "name-defined", 
    "misc", "var-annotated", "comparison-overlap", "str-bytes-safe",
    "unused-ignore", "no-untyped-def"
]

# --------------------------------------------------
# pyright
# --------------------------------------------------

[tool.pyright]
# Python version
pythonVersion = "3.13"

# Type checking mode
typeCheckingMode = "strict"

# Source configuration
include = ["src"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/build",
    "**/dist",
    "**/.mypy_cache",
]

# Strict type checking settings (matching mypy configuration)
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true

# Report settings
reportMissingTypeStubs = false
reportMissingImports = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportOverlappingOverload = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = true
reportUnknownVariableType = false
reportUnknownMemberType = false
reportMissingParameterType = true
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportCallIssue = false
reportAttributeAccessIssue = false
reportArgumentType = false
reportGeneralTypeIssues = false

# --------------------------------------------------
# pytest
# --------------------------------------------------

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
filterwarnings = [
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

# --------------------------------------------------
# coverage
# --------------------------------------------------

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
